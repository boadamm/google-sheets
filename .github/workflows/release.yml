name: Release

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Run tests
      run: |
        pytest --cov=. --cov-report=term-missing
        
    - name: Create Linux portable app
      if: matrix.os == 'ubuntu-latest'
      run: |
        pyinstaller --onefile --name SheetsBot-Linux cli.py
        mkdir -p dist/SheetsBot-Linux
        cp dist/SheetsBot-Linux dist/SheetsBot-Linux/
        cp -r config dist/SheetsBot-Linux/
        cp README.md INSTALLATION.md API_SETUP_GUIDE.md dist/SheetsBot-Linux/
        cp install.sh dist/SheetsBot-Linux/
        cd dist && zip -r SheetsBot-Linux.zip SheetsBot-Linux/
        
    - name: Create Windows portable app
      if: matrix.os == 'windows-latest'
      run: |
        pyinstaller --onefile --name SheetsBot-Windows cli.py
        mkdir dist/SheetsBot-Windows
        copy dist/SheetsBot-Windows.exe dist/SheetsBot-Windows/
        xcopy config dist/SheetsBot-Windows/config/ /E /I
        copy README.md dist/SheetsBot-Windows/
        copy INSTALLATION.md dist/SheetsBot-Windows/
        copy API_SETUP_GUIDE.md dist/SheetsBot-Windows/
        copy install.bat dist/SheetsBot-Windows/
        
    - name: Setup certificate for Windows codesign
      if: matrix.os == 'windows-latest' && env.WIN_CERT_BASE64 != ''
      run: |
        echo "${{ secrets.WIN_CERT_BASE64 }}" | base64 -d > certificate.p12
        certutil -user -q -p "${{ secrets.WIN_CERT_PASSWORD }}" -importpfx certificate.p12 NoRoot
      env:
        WIN_CERT_BASE64: ${{ secrets.WIN_CERT_BASE64 }}
        WIN_CERT_PASSWORD: ${{ secrets.WIN_CERT_PASSWORD }}
        
    - name: Sign Windows executable
      if: matrix.os == 'windows-latest' && env.WIN_CERT_BASE64 != ''
      run: |
        signtool sign /fd SHA256 /t http://timestamp.digicert.com /n "SheetsBot" dist/SheetsBot-Windows/SheetsBot-Windows.exe
      env:
        WIN_CERT_BASE64: ${{ secrets.WIN_CERT_BASE64 }}
        
    - name: Create Windows signed ZIP
      if: matrix.os == 'windows-latest'
      run: |
        cd dist
        powershell -Command "Compress-Archive -Path 'SheetsBot-Windows/*' -DestinationPath 'SheetsBot-Windows-signed.zip'"
        
    - name: Create installation packages
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Create source distribution
        mkdir -p dist/source
        git archive --format=zip --output=dist/SheetsBot-Source.zip HEAD
        
        # Create quick install scripts
        echo '#!/bin/bash' > dist/quick-install-linux.sh
        echo 'curl -sSL https://github.com/boadamm/demoproject/raw/main/install.sh | bash' >> dist/quick-install-linux.sh
        chmod +x dist/quick-install-linux.sh
        
        echo '@echo off' > dist/quick-install-windows.bat
        echo 'powershell -Command "Invoke-WebRequest -Uri https://github.com/boadamm/demoproject/raw/main/install.bat -OutFile install.bat; .\install.bat"' >> dist/quick-install-windows.bat
        
    - name: Extract changelog for release
      if: matrix.os == 'ubuntu-latest'
      id: changelog
      run: |
        # Extract release notes from CHANGELOG.md
        python3 -c "
        import re
        import sys
        
        with open('CHANGELOG.md', 'r') as f:
            content = f.read()
        
        # Find the latest release section
        pattern = r'## \[([^\]]+)\] - \d{4}-\d{2}-\d{2}(.*?)(?=## \[|$)'
        matches = re.findall(pattern, content, re.DOTALL)
        
        if matches:
            version, notes = matches[0]
            print(f'RELEASE_NOTES<<EOF', file=sys.stderr)
            print(notes.strip(), file=sys.stderr)
            print('EOF', file=sys.stderr)
        else:
            print('RELEASE_NOTES=No release notes found', file=sys.stderr)
        " 2>> $GITHUB_ENV
        
    - name: Publish Release
      uses: softprops/action-gh-release@v2
      if: matrix.os == 'ubuntu-latest' && (startsWith(github.ref, 'refs/tags/') || github.event_name == 'release')
      with:
        files: |
          dist/SheetsBot-Linux.zip
          dist/SheetsBot-Windows-signed.zip
          dist/SheetsBot-Source.zip
          dist/quick-install-linux.sh
          dist/quick-install-windows.bat
        body: |
          ## SheetsBot Release ${{ github.ref_name || github.event.release.tag_name }}
          
          ${{ env.RELEASE_NOTES }}
          
          ### üì¶ Download Options
          
          **Quick Install (Recommended):**
          - **Linux/Mac**: `curl -sSL https://github.com/boadamm/demoproject/raw/main/install.sh | bash`
          - **Windows**: Download and run `quick-install-windows.bat`
          
          **Manual Install:**
          - **Linux**: Download `SheetsBot-Linux.zip`
          - **Windows**: Download `SheetsBot-Windows-signed.zip`
          - **Source**: Download `SheetsBot-Source.zip`
          
          ### üöÄ Key Features
          - Google Sheets automation with live sync
          - File monitoring and intelligent processing
          - Slack notifications with diff summaries
          - Modern GUI and powerful CLI interfaces
          - Cross-platform support (Windows, Linux, macOS)
          - Docker containerization for easy deployment
          
          ### üìã Requirements
          - Python 3.11+
          - Internet connection for initial setup
          - Google Sheets API credentials (see API_SETUP_GUIDE.md)
          
          ### üìñ Documentation
          - [üìã Installation Guide](https://github.com/boadamm/demoproject/blob/main/INSTALLATION.md)
          - [üîß API Setup Guide](https://github.com/boadamm/demoproject/blob/main/API_SETUP_GUIDE.md)  
          - [üìö Full Documentation](https://github.com/boadamm/demoproject/blob/main/README.md)
          - [üìù Changelog](https://github.com/boadamm/demoproject/blob/main/CHANGELOG.md)
        tag_name: ${{ github.ref_name || github.event.release.tag_name }}
        name: "SheetsBot ${{ github.ref_name || github.event.release.tag_name }}"
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
  update-readme-download-links:
    needs: build-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update README download links
      run: |
        # Update download links to point to latest release
        sed -i 's|releases/latest/download|releases/download/${{ github.ref_name || github.event.release.tag_name }}|g' README.md
        
    - name: Commit updated README
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git diff --staged --quiet || git commit -m "Update download links for release ${{ github.ref_name || github.event.release.tag_name }}"
        git push 