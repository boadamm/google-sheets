# Cursor Rules for sheets-bot Development Environment

## PYTHON_STYLE:
- Use Black for formatting (line length 88)
- Use Ruff for linting with all rules enabled
- Follow PEP 8 naming conventions strictly
- Use type hints for all function signatures
- Prefer pathlib over os.path for file operations
- Use f-strings for string formatting

## DEVELOPMENT_PROCESS:
- Test-Driven Development (TDD): Write failing tests first
- Behavior-Driven Development (BDD): Tests should describe behavior
- All code changes must have corresponding tests
- Minimum test coverage: 95%
- Run tests before any commit: `pytest -q`

## CODE_QUALITY_GATES:
- Pre-commit hooks must pass:
  - Black formatting check
  - Ruff linting (zero warnings)
  - Pytest with coverage report
- No unused imports or variables
- No magic numbers or hardcoded strings
- Docstrings required for all public functions/classes

## DOCKER_REQUIREMENTS:
- Base images must be Alpine-based when possible
- Multi-stage builds required for Python applications
- No secrets in Dockerfiles or images
- Use .dockerignore to exclude unnecessary files

## CONDA_ENVIRONMENT:
- Use pinned versions in environment.yml
- Test environment creation regularly
- Document any OS-specific dependencies
- Separate dev and production dependencies clearly

## COMMIT_STANDARDS:
- Conventional commits format: type(scope): description
- Types: feat, fix, docs, style, refactor, test, chore
- Each commit must pass CI pipeline
- Squash commits for feature branches

## SECURITY_PRACTICES:
- No secrets in code or environment files
- Use environment variables for configuration
- Validate all external inputs
- Regular dependency updates and security scans

## WSL_SPECIFIC:
- Document any Linux-specific build dependencies
- Test conda environment creation on fresh WSL instances
- Include build-essential and libffi-dev installation notes 